<?php

namespace BackBundle\Repository;

/**
 * collectionmediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionmediaRepository extends \Doctrine\ORM\EntityRepository
{
     public function findgallerysCarouselHomeMedia( $type , $count )

    {
        $sql = $this->createQueryBuilder('c')
            ->select('c')
            ->innerJoin('c.member', 'u')
           ->where("c.showPageBanniere = 0")
            ->orWhere("c.showPageBanniere is Null")
            ->where("c.type = :type")
            ->orderBy("c.id","DESC")
            ->setParameter('type', $type)
            ->setMaxResults ( $count );
        return $sql->getQuery()->getResult();
    }

public function getCollectionneMedia($type,$user)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.type = :type")
            ->andWhere("p.member = :member")
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('member', $user) ;
        return $sql->getQuery()->getResult();

    }

   public function getCollectionneMediaByType($type,$user , $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p, pm')
            ->leftjoin('p.personnagesMedia', 'pm')
            ->where("p.type = :type")
            ->andWhere("p.member = :member")
            ->andWhere("p.typeMedia = :typeMedia")
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('member', $user)
            ->setParameter('typeMedia', $typeMedia) ;
        return $sql->getQuery()->getArrayResult();

    }



   public function getCollectionneMediafixVideos( $count , $type,$user   )
    {

        $sql = $this->createQueryBuilder('p')
            ->select('p, pm')
            ->leftjoin('p.personnagesMedia', 'pm')
            ->where("p.type = :type")
            ->andWhere("p.member = :member")
            ->andWhere("p.typeMedia = 'mp4' or  p.typeMedia = 'Url'")
            ->orderBy("p.id","DESC")

            ->setParameter('type', $type)
            ->setParameter('member', $user)

            ->setMaxResults ( $count );
        return $sql->getQuery()->getArrayResult();

    }



   public function getCollectionneMediaByTypeBD($type,$user , $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p, pm ,per')
            ->leftjoin('p.personnagesMedia', 'per')
            ->leftjoin('p.bookImages', 'pm')
            ->where("p.type = :type")
            ->andWhere("p.member = :member")
            ->andWhere("p.typeMedia = :typeMedia")
            ->orderBy("pm.nbrShow","ASC")
            ->setParameter('type', $type)
            ->setParameter('member', $user)
            ->setParameter('typeMedia', $typeMedia) ;
        return $sql->getQuery()->getArrayResult();

    }




    public function getCollectionneMediaAmiAussi($type, $id , $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p, pm , u')
            ->innerJoin('p.member', 'u')
            ->leftjoin('p.personnagesMedia', 'pm') 
            ->where("p.type = :type")
            ->andWhere("p.typeMedia = :typeMedia")
            ->andWhere("u.id = :member")
            
            ->setParameter('type', $type) 
            ->setParameter('member', $id)
            ->setParameter('typeMedia', $typeMedia)
             ;

  

        return $sql->getQuery()->getResult();

    }

 
    public function getCollectionneMediaAmiAussiAutre($type, $id , $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p, pm , u')
            ->innerJoin('p.member', 'u')
            ->leftjoin('p.personnagesMedia', 'pm')
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->where("p.type = :type")
            ->andWhere("p.typeMedia = :typeMedia")
            ->andWhere("u.id != :member")
            
            ->setParameter('type', $type) 
            ->setParameter('member', $id)
            ->setParameter('typeMedia', $typeMedia)
            ->addOrderBy('rand')
            ->setMaxResults ( 10 );

  

        return $sql->getQuery()->getResult();

    }

   public function getCollectionneMediaByLivreBD($type,$id , $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->where("p.type = :type")
            ->andWhere("p.typeMedia = :typeMedia")
            ->andWhere("p.descriptionCourt IS NOT NULL")
            ->andWhere("p.title IS NOT NULL")
            ->andWhere("p.path IS NOT NULL")
            ->andWhere("p.id != :idBook")
            ->setParameter('type', $type)
            ->setParameter('idBook', $id)
            ->setParameter('typeMedia', $typeMedia)
            ->addOrderBy('rand')
            ->setMaxResults ( 2 );

        return $sql->getQuery()->getResult();

    }

   public function getCollectionneMediaByTypeNnbrFix($type,$user , $type1 , $count)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.typeMedia = :type1")
            ->andWhere("p.type = :type")
            ->andWhere("p.member = :member")
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('member', $user)
            ->setParameter('type1', $type1)
            ->setMaxResults ( $count );
        return $sql->getQuery()->getArrayResult();

    }
  public function getCollectionneByType($count ,$type, $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.type = :type")
             ->andWhere("p.typeMedia = :typeMedia")
            ->andWhere ( "p.path IS NOT NULL" )
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('typeMedia', $typeMedia)
            ->setMaxResults ( $count );
        return $sql->getQuery()->getResult();

    }

 public function getCollectionneByMode($type, $typeMedia, $mode)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.type = :type")
             ->andWhere("p.typeMedia = :typeMedia")
             ->andWhere("p.modeMedia IN (:mode)")
            ->andWhere ( "p.path IS NOT NULL" )
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('typeMedia', $typeMedia)
            ->setParameter('mode', $mode)
        ;
        return $sql->getQuery()->getResult();

    }

    public function getCollectionneByTypeListeVip($count ,$type, $typeMedia , $ListVip)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->innerJoin('p.member', 'u')
            ->where("p.type = :type")
            ->andWhere("p.typeMedia = :typeMedia")
            ->andWhere ( "p.path IS NOT NULL" )
            ->andWhere ( "u.id IN (:ListIdVip)" )
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('typeMedia', $typeMedia)
            ->setParameter ( 'ListIdVip' , $ListVip )
            ->setMaxResults ( $count );
        return $sql->getQuery()->getResult();

    }

    public function getCollectionneVideoYoutube($count ,$type, $typeMedia)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.type = :type")
             ->andWhere("p.sourcevideo = :typeMedia")

            ->andWhere ( "p.url IS NOT NULL" )
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('typeMedia', $typeMedia)
            ->setMaxResults ( $count );
        return $sql->getQuery()->getResult();

    }
    public function getCollectionneMediafix($count ,$type,$user)
    {
        $sql = $this->createQueryBuilder('p')
            ->select('p')
            ->where("p.type = :type")
            ->andWhere("p.member = :member")
            ->orderBy("p.id","DESC")
            ->setParameter('type', $type)
            ->setParameter('member', $user)
            ->setMaxResults ( $count );
        return $sql->getQuery()->getResult();

    }

    public function getMedia ( $count , $type )
    {
        $sql = $this->createQueryBuilder ( 'p' )
            ->select ( 'p' )
            ->where ( "p.type = :type" )
            ->orderBy ( "p.id" , "DESC" )
            ->setParameter ( 'type' , $type )
            ->setMaxResults ( $count );
        return $sql->getQuery ()->getResult ();

    }

 public function getMediaListVip ( $count , $type , $ListVip )
    {
        $sql = $this->createQueryBuilder ( 'p' )
            ->select ( 'p' )
            ->innerJoin('p.member', 'u')
            ->where ( "p.type = :type" )

            ->andWhere ( "u.id IN (:ListIdVip)" )
            ->orderBy ( "p.id" , "DESC" )
            ->setParameter ( 'type' , $type )
            ->setParameter ( 'ListIdVip' , $ListVip )
            ->setMaxResults ( $count );
        return $sql->getQuery ()->getResult ();

    }


 public function getMediaListNotINVip ( $count , $type , $ListVip )
    {
        $sql = $this->createQueryBuilder ( 'p' )
            ->select ( 'p' )
            ->innerJoin('p.member', 'u')
            ->where ( "p.type = :type" )

            ->andWhere ( "u.id NOT IN (:ListIdVip)" )
            ->orderBy ( "p.id" , "DESC" )
            ->setParameter ( 'type' , $type )
            ->setParameter ( 'ListIdVip' , $ListVip )
            ->setMaxResults ( $count );
        return $sql->getQuery ()->getResult ();

    }

    public function getMediaListVipRand ( $count , $type , $ListVip )
    {
        $sql = $this->createQueryBuilder ( 'p' )
            ->select ( 'p' )
            ->addSelect ( 'RAND() as HIDDEN rand ' )
            ->innerJoin('p.member', 'u')
            ->where ( "p.type = :type" )
            ->andWhere ( "u.id IN (:ListIdVip)" )

            ->setParameter ( 'type' , $type )
            ->setParameter ( 'ListIdVip' , $ListVip )
            ->addOrderBy('rand')
            ->setMaxResults ( $count );
        return $sql->getQuery ()->getResult ();

    }



    public function getMediaRand ( $count , $type  )
    {
        $role = "ROLE_VIP" ;
        $sql = $this->createQueryBuilder ( 'p' )
                    ->select ( 'p' )
                    ->addSelect ( 'RAND() as HIDDEN rand ' )
                    ->innerJoin('p.member', 'u')
                    ->where ( "p.type = :type" )
                    ->andWhere  ( 'u.roles LIKE :roles' )
                    ->setParameter ( 'type' , $type )
                    ->setParameter ( 'roles' , '%"' . $role . '"%' )
                    ->addOrderBy('rand')
                    ->setMaxResults ( $count );
        return $sql->getQuery ()->getResult ();

    }



}
