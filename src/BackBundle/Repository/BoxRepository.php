<?php

namespace BackBundle\Repository;

/**
 * BoxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BoxRepository extends \Doctrine\ORM\EntityRepository
{

    /** Get Media **/
    public function getUserBoxByRole ( $userCourant , $enable , $role , $fan  )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('b')
            ->innerJoin ( 'b.vip' , 'v' )
            ->where ( "b.membre = :userCourant" )
            ->andWhere("b.enable = :enable")
            ->andWhere("b.typebox  LIKE 'user'")
            ->andWhere ( 'v.roles LIKE :roles' )
            ->andWhere ( 'v.fan LIKE :fan' )
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'enable' , $enable )
            ->setParameter ( 'fan' , $fan )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getResult() ;
    }


    /** End get medias **/
  /** Get Media **/
    public function getMediaBox ( $userCourant , $enable  )
    {
        $sql = $this->createQueryBuilder ( 'b' )

            ->innerJoin ( 'b.medias' , 'md' )
            ->where ( "b.membre = :userCourant" )
            ->andWhere("b.enable = :enable")
            ->andWhere("b.typebox NOT LIKE 'user'")
            ->andWhere("b.typebox NOT LIKE 'wordsearch'")
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'enable' , $enable )

            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getArrayResult ();
    }

    /** End get medias **/

    /** Get Media pas encoure commencer  **/
    public function getMediaNextBox ( $userCourant , $enable  )
    {
        $date = date ( "Y-m-d" );

        $sql = $this->createQueryBuilder ( 'b' )

            ->innerJoin ( 'b.medias' , 'md' )
            ->where ( "b.membre = :userCourant" )
            ->andWhere("b.enable = :enable")
            ->andWhere("b.typebox NOT LIKE 'user'")
            ->andWhere("b.typebox NOT LIKE 'wordsearch'")
            ->andWhere ( "md.startdate >= :date" )
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'enable' , $enable )
            ->setParameter ( 'date' , $date )
            ->orderBy ( 'md.startdate' , 'ASC' );
        return $sql->getQuery ()->getResult ();
    }

    /** End get medias **/
     /** Get Vip **/
    public function getVipBox ( $userCourant   )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('v.id')
            ->innerJoin ( 'b.vip' , 'v' )
            ->where ( "b.membre = :userCourant" )
            ->andWhere("b.enable = :enable")
            ->andWhere("b.typebox  LIKE 'user'")
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'enable' , 1 )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getArrayResult ();
    }

    /** Get Vip **/
    public function getVipBoxRAND ( $userCourant )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select ( 'v.id' )
            ->addSelect ( 'RAND() as HIDDEN rand ' )
            ->innerJoin ( 'b.vip' , 'v' )
            ->where ( "b.membre = :userCourant" )
            ->andWhere ( "b.enable = :enable" )
            ->andWhere ( "b.typebox  LIKE 'user'" )
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'enable' , 1 )
            ->orderBy ( 'rand' )
            ->addOrderBy ( 'v.numbervu' , 'desc' );
        return $sql->getQuery ()->getArrayResult ();
    }
   /** Get fans **/
    public function getfansBox ( $userCourant   )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('b')
            ->innerJoin ( 'b.membre' , 'v' )
            ->where ( "b.vip = :userCourant" )
            ->andWhere("b.typebox  LIKE 'user'")
            ->setParameter ( 'userCourant' , $userCourant )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getResult ();
    }
/** Get fans **/
    public function getfansHumeurBox ( $userCourant ,$typeHumeur  )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('b')
            ->innerJoin ( 'b.membre' , 'v' )
            ->where ( "b.vip = :userCourant" )
            ->andWhere("b.typebox  LIKE 'user'")
            ->andWhere("v.coloremotioncard  LIKE :typeHumeur")
            ->setParameter ( 'userCourant' , $userCourant )
            ->setParameter ( 'typeHumeur' , $typeHumeur )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getResult ();
    }
  public function getfansAutherHumeurBox ( $userCourant  )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('b')
            ->innerJoin ( 'b.membre' , 'v' )
            ->where ( "b.vip = :userCourant" )
            ->andWhere("b.typebox  LIKE 'user'")
            ->andWhere("v.coloremotioncard  IS NULL")
            ->setParameter ( 'userCourant' , $userCourant )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getResult ();
    }
 public function getfansHumeurAll ( $typeHumeur  )
    {
        $sql = $this->createQueryBuilder ( 'b' )
            ->select('b')
            ->innerJoin ( 'b.membre' , 'v' )
            ->andWhere("b.typebox  LIKE 'user'")
            ->andWhere("v.coloremotioncard  LIKE :typeHumeur")
            ->setParameter ( 'typeHumeur' , $typeHumeur )
            ->orderBy ( 'b.datecreate' , 'desc' );
        return $sql->getQuery ()->getResult ();
    }

   
}
