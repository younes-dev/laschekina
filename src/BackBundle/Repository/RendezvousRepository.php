<?php

namespace BackBundle\Repository;

/**
 * RendezvousRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RendezvousRepository extends \Doctrine\ORM\EntityRepository
{

    public function findgetRDV ()
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->Where ( "r.endDate >= :startdate" )
            ->andWhere ( "r.startDate <= :startdate" )
            ->setParameter ( 'startdate' , $date )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();
    }



    public function findgetRDVFuture ()
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->innerJoin ( 'r.vip' , 'u' )

            ->Where ( "r.startDate > :startdate" )
            ->setParameter ( 'startdate' , $date )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();
    }


    public function findRDVMap ($IdVip )
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->innerJoin ( 'r.vip' , 'u' )
            ->Where ( "r.endDate >= :courantdate" )
            ->andWhere( "u.id = :idVIP" )
            ->andWhere( "r.lng IS NOT NULL" )
            ->andWhere( "r.lat IS NOT NULL" )
            ->setParameter ( 'courantdate' , $date )
            ->setParameter ( 'idVIP' , $IdVip )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();
    }

    public function findListvipgetRDV ( $ListIdVip )
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->innerJoin ( 'r.vip' , 'u' )
            ->Where ( "r.endDate >= :startdate" )
            ->andWhere ( "r.startDate <= :startdate" )
            ->andWhere ( "u.id IN (:ListIdVip)" )
            ->setParameter ( 'startdate' , $date )
            ->setParameter ( 'ListIdVip' , $ListIdVip )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();
    }

    /********* liste RDV Aletr VIP ***********/

    public function getAlertRDVVipCourant (  )
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->Where ( "r.endDate >= :startdate" )
            ->andWhere ( "r.startDate <= :startdate" )
            ->setParameter ( 'startdate' , $date )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();

    }


    public function getAlertRDVVip ( $IdVip )
    {
        $date = date ( "Y-m-d" );
        $sql = $this->createQueryBuilder ( 'r' )
            ->select ( 'r' )
            ->innerJoin ( 'r.vip' , 'u' )
            ->Where ( "r.endDate >= :startdate" )
            ->andWhere ( "u.id = :IdVip" )
            ->setParameter ( 'startdate' , $date )
            ->setParameter ( 'IdVip' , $IdVip )
            ->orderBy ( 'r.startDate' , 'ASC' );
        return $sql->getQuery ()->getResult ();

    }

}
