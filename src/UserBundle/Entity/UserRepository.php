<?php

namespace UserBundle\Entity;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    public function getListVIP ( $ListIdVip )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( "u.id IN (:ListIdVip)" )
            ->setParameter ( 'ListIdVip' , $ListIdVip )
            ->orderBy ( 'rand' )
            ->orderBy ( "u.numbervu" , 'DESC' );
        return $qb->getQuery ()->getResult ();
    }

    public function getListFixVIP ( $ListIdVip )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( "u.id IN (:ListIdVip)" )
            ->setMaxResults ( 5 )
            ->setParameter ( 'ListIdVip' , $ListIdVip )
            ->orderBy ( 'rand' )
            ->orderBy ( "u.numbervu" , 'DESC' );
        return $qb->getQuery ()->getResult ();
    }


    /********* Requete Commentaires   ***********/

    public function getCollectionneCommentaires ( $id )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->innerJoin ( 'u.commentaire' , 'c' )
            ->where ( 'u.id = :id' )
            ->orderBy ( "u.username" , 'ASC' )
            ->setParameter ( 'id' , $id );

        return $qb->getQuery ()->getResult ();
    }


    /********* Get VIP d'apès le  Role RAND   ***********/
    public function findByRoleRANDFixe ( $role , $count )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->andWhere ( 'u.pictureprofil  IS NOT NULL' )
            ->setMaxResults ( $count )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->addOrderBy ( 'rand' );

        return $qb->getQuery ()->getResult ();
    }

    /********* Get VIP d'apès le  Role RAND  how In Home  ***********/
	
    public function findByFixeNumberShowInHome (  $role ,  $count )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->andWhere ( 'u.pictureprofil  IS NOT NULL' )
            ->andWhere ( 'u.showInHome  = 1' )
            ->setMaxResults ( $count )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->addOrderBy ( 'rand' );

        return $qb->getQuery ()->getResult ();
    }

    /********* requete Role   ***********/
    
    public function  findByRole ( $role )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->orderBy ( "u.username" , 'ASC' )
            ->setParameter ( 'roles' , '%"' . $role . '"%' );

        return $qb->getQuery ()->getResult ();
    }

     public function  findByRoleVip ( $role , $fan)
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->andWhere('u.fan LIKE :fan')
            ->orderBy ( "u.username" , 'ASC' )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->setParameter ( 'fan' , $fan );

        return $qb->getQuery ()->getResult ();
    }

    public function findByRoleHome ( $role , $showVip)
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->andWhere ( 'u.showInHome = :showVip' )
            ->orderBy ( "u.username" , 'ASC' )
            ->setParameter ( 'showVip' , $showVip  )
            ->setParameter ( 'roles' , '%"' . $role . '"%' );

        return $qb->getQuery ()->getResult ();
    }


    public function findByRoles ( $role1 , $role2 )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles1 or u.roles LIKE :roles2' )
            ->orderBy ( "u.username" , 'ASC' )
            ->setParameter ( 'roles1' , '%"' . $role1 . '"%' )
            ->setParameter ( 'roles2' , '%"' . $role2 . '"%' );

        return $qb->getQuery ()->getResult ();
    }


    /********* Get Liste de VIP pour pou-up ***********/
    public function findViPouup ( $role , $count , $id )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->andWhere ( 'u.id != :id' )
            ->setMaxResults ( $count )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->setParameter ( 'id' , $id )
            ->orderBy ( 'u.numbervu' , 'desc' );

        return $qb->getQuery ()->getResult ();
    }

    /********* requete trie  numbre vu avec nombre fix or all ***********/


    public function findByAllNumberVu ( $role )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->orderBy ( 'u.numbervu' , 'desc' );

        return $qb->getQuery ()->getResult ();
    }

    public function findViPMagazine ( $role , $count )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->setMaxResults ( $count )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->orderBy ( 'u.numbervu' , 'desc' );

        return $qb->getQuery ()->getResult ();
    }

    public function findByFixeNumberVu ( $role , $count )
    {
        $qb = $this->_em->createQueryBuilder ();
        $qb->select ( 'u' )
            ->addSelect ( 'RAND() as HIDDEN rand' )
            ->from ( "UserBundle:User" , 'u' )
            ->where ( 'u.roles LIKE :roles' )
            ->setMaxResults ( $count )
            ->setParameter ( 'roles' , '%"' . $role . '"%' )
            ->orderBy ( 'rand' )
            ->addOrderBy ( 'u.numbervu' , 'desc' );;

        return $qb->getQuery ()->getResult ();
    }


    /********* requete get Vip Box     ***********/

    public function getVipBox ( $idMembre , $enable )
    {
        $sql = $this->createQueryBuilder ( 'u' )
            ->select ( 'u' )
            ->innerJoin ( 'u.boxvip' , 'm' )
            ->where ( "m.membre = :idMembre" )
            ->andWhere ( "m.vip = u.id" )
            ->andWhere ( "m.enable = :enable" )
            ->setParameter ( 'idMembre' , $idMembre )
            ->setParameter ( 'enable' , $enable );
        //  $sql->getQuery()->getSQL();
        return $sql->getQuery ()->getResult ();

    }


    /********* requete search User    ***********/

    public function searchUserAll ( $searchWord )
    {
		$qb = $this->createQueryBuilder('u');
		
		$query = $qb->where(
					$qb->expr()->orX(
						   $qb->expr()->like("CONCAT(u.nom, ' ', u.prenom)", ':searchWord'),
						   $qb->expr()->like("CONCAT(u.prenom, ' ', u.nom)", ':searchWord'),
						   $qb->expr()->like('u.nom', ':searchWord'),
						   $qb->expr()->like('u.prenom', ':searchWord')
					))
                    ->setParameter('searchWord', '%' . $searchWord . '%');
		

        return $query->getQuery()->getResult();
    }


    public function searchUserAllMap ( $searchWord )
    {
		$qb = $this->createQueryBuilder('u');
		
		$query = $qb->where(
						$qb->expr()->orX(
						   $qb->expr()->like("CONCAT(u.nom, ' ', u.prenom)", ':searchWord'),
						   $qb->expr()->like("CONCAT(u.prenom, ' ', u.nom)", ':searchWord'),
						   $qb->expr()->like('u.nom', ':searchWord'),
						   $qb->expr()->like('u.prenom', ':searchWord')
						)
					)
					->andWhere(
						$qb->expr()->andX(
						   'u.latitude IS NOT NULL',
						   'u.longitude IS NOT NULL'
						)
					)
                    ->setParameter('searchWord', '%' . $searchWord . '%');
		

        return $query->getQuery()->getResult();

    }

    /********* requete search Membre     ***********/

    public function searchMembre ( $searchWord , $role )
    {   
        $qb = $this->createQueryBuilder('u');
		
		$query = $qb->where(
						$qb->expr()->orX(
						   $qb->expr()->like("CONCAT(u.nom, ' ', u.prenom)", ':searchWord'),
						   $qb->expr()->like("CONCAT(u.prenom, ' ', u.nom)", ':searchWord'),
						   $qb->expr()->like('u.nom', ':searchWord'),
						   $qb->expr()->like('u.prenom', ':searchWord')
						)
					)
					->andWhere(
                                $qb->expr()->like('u.roles', ':role')						
						      )
                    ->setParameter('searchWord', '%' . $searchWord . '%')
                    ->setParameter('role', '%' . $role . '%')
                    ;
		

        return $query->getQuery()->getResult();

    }

    /********* requete get Media acteurs     ***********/
    public function getListeacteur( $idMedia )
    {
        $sql = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.medias', 'md')
            ->where("md.id = :idMedia")
            ->setParameter('idMedia', $idMedia);
        return $sql->getQuery()->getResult();
    }
}
